/******************************************************************************
 * Copyright (c) 2022, Centrum Wiskunde & Informatica (CWI)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contributors:
 *   * Riemer van Rozen - rozen@cwi.nl - CWI
 ******************************************************************************/
package Delta.TinyLiveSML {
  class Mach {
    String name;
    Set<State> states;
    Set<MachInst> instances;
  
    effect Create(future Mach m, String name) {
      m = new Mach();
      m.name = name;
      m.states = new Set<State>();
      m.instances = new Set<MachInst>();
    }
    
    inverse effect Delete(past Mach m, String name = m.name) {
      m.name = null;       
      delete m.states;
      delete m.instances;
      delete m;
    }
    pre {
      foreach(State s in m.states) { State.Delete(s, s.name, m); }
      foreach(MachInst mi in m.instances) { MachInst.Delete(mi, m); }      
    }
  
    side-effect AddState(Mach m, State s) {
      m.states.add(s);
    }
    post {
      foreach(MachInst mi in m.instances) {
        begin StateInst si;
        StateInst.Create(si, s);
        MachInst.AddStateInst(mi, si, s);
        MachInst.Initialize(mi);        
      }
    }
    
    inverse side-effect RemoveState(Mach m, State s) {
      m.states.remove(s);
    }
    pre {       
      foreach(MachInst mi in m.instances) {
        StateInst si = mi.sis[s];
        MachInst.RemoveStateInst(mi, si, s);
        StateInst.Delete(si, s);
        MachInst.Initialize(mi);
      }
    }
        
    side-effect AddMachInst(Mach m, MachInst mi) { m.instances.add(mi); }    
    inverse side-effect RemoveMachInst(Mach m, MachInst mi) { m.instances.remove(mi); }
    
    public override String ToString() {
      String r = "machine " + name + " \n";
      foreach(State s in states) {
        r = r + "  " + s + "\n";
        foreach(Trans t in s.o){ r = r + "    " + t + "\n"; }
      }
      return r;
    }
  }
}