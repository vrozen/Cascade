/******************************************************************************
 * Copyright (c) 2022, Centrum Wiskunde & Informatica (CWI)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contributors:
 *   * Riemer van Rozen - rozen@cwi.nl - CWI
 ******************************************************************************/
package Delta.TinyLiveSML {
  class State {
    String name;
    Set<Trans> i;
    Set<Trans> o;
  
    effect Create(future State s, String name, Mach m) {
      s = new State();
      s.i = new Set<Trans>();
      s.o = new Set<Trans>();      
      s.name = name;
    }
    post { Mach.AddState(m, s); }
  
    inverse effect Delete(past State s, String name = s.name, Mach m) {
      s.name = null;
      delete s.i;
      delete s.o;
      delete s;
    }
    pre {
      foreach(Trans t in s.o) { Trans.Delete(t, t.src, t.evt, t.tgt); }      
      foreach(Trans t in s.i) { Trans.Delete(t, t.src, t.evt, t.tgt); }      
      Mach.RemoveState(m, s);
    }
  
    side-effect AddIn(State s, Trans t) { s.i.add(t);  }
    inverse side-effect RemoveIn(State s, Trans t) { s.i.remove(t); }
    
    side-effect AddOut(State s, Trans t) { s.o.add(t); }    
    inverse side-effect RemoveOut(State s, Trans t) { s.o.remove(t); }
    
    public override String ToString() { return name; }
  }
}